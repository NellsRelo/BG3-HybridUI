<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:System="clr-namespace:System;assembly=mscorlib"
					xmlns:ls="clr-namespace:ls;assembly=Code"
					xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
					mc:Ignorable="d">

        <!-- Appearance Components -->

          <!-- Input Components -->
            <!-- Name Input -->
            <!-- HUI Naming Box Component - Character name input using HUI_TextInputTemplate -->
            <ControlTemplate x:Key="HUI_NamingBoxComponent">
                <ContentControl Template="{StaticResource HUI_NameInputTemplate}" 
                                Tag="{Binding Source='h5cd3cabag657ag4abfga33fg9b1b2808ee7f', Converter={StaticResource TranslatedStringConverter}}"/>
            </ControlTemplate>

          <!-- Hardcoded Carousels -->
            <!-- Body Type Selection -->
            <ControlTemplate x:Key="HUI_BodyTypeBoxComponent">
                <StackPanel d:DataContext="{d:DesignInstance {x:Type ls:DCCharacterCreation}, IsDesignTimeCreatable=True}">
                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="Female">
                            <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="0"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="Male">
                            <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="1"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="FemaleStrong">
                            <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="2"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding BodyTypeAndShape}" Value="MaleStrong">
                            <b:ChangePropertyAction TargetName="bodyTypeCarousel" PropertyName="SelectedIndex" Value="3"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>

                    <ContentControl x:Name="bodyTypeSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock Text="{Binding Source='hc4f5c05bgc2feg4333ga08fg229b33c42437', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" />
                    </ContentControl>
                    <ListBox x:Name="bodyTypeCarousel" Margin="0,12,0,0" 
                            Tag="BodyType" Template="{StaticResource HUI_CarouselTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="bodyTypeSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                        
                        <ListBoxItem x:Name="female" Content="1"/>
                        <ListBoxItem x:Name="male" Content="2"/>
                        <ListBoxItem x:Name="femaleStrong" Content="3"/>
                        <ListBoxItem x:Name="maleStrong" Content="4"/>
                    </ListBox>
                </StackPanel>
                
                <ControlTemplate.Triggers>
                    <!-- Hide strong body types for races that don't support additional body shapes -->
                    <DataTrigger Binding="{Binding SelectedRace.HasAdditionalBodyShapes}" Value="False">
                        <Setter TargetName="femaleStrong" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="maleStrong" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Identity Selection -->
            <ControlTemplate x:Key="HUI_IdentityBoxComponent">
                <StackPanel x:Name="IdentityContainer" Visibility="{Binding CanShowIdentity, Converter={StaticResource BoolToVisibleConverter}}">
                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Male">
                            <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="0"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Female">
                            <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="1"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding SelectedIdentity}" Value="Neutral">
                            <b:ChangePropertyAction TargetName="identityCarousel" PropertyName="SelectedIndex" Value="2"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>

                    <ContentControl x:Name="identitySubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock Text="{Binding Source='hcc23cfaagbc1eg4bb0gafb9g9f720497b786', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}" />
                    </ContentControl>

                    <ListBox x:Name="identityCarousel" IsEnabled="{Binding IsIdentityEnabled}" Margin="0,12,0,0" 
                            Tag="Identity" Template="{StaticResource HUI_CarouselTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="identitySubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                        <ListBox.Items>
                            <ListBoxItem x:Name="male" Content="{Binding Source='hf12d3837gd6fbg448ag813dg9cf6d9a4d412', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ListBoxItem x:Name="female" Content="{Binding Source='h5d60ad1cg41dcg4d9fgaba8gda842c090327', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ListBoxItem x:Name="neutral" Content="{Binding Source='hea2ce077g2b7ag42dfgb194g928c3dd108a7', Converter={StaticResource TranslatedStringConverter}}"/>
                        </ListBox.Items>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Heterochromia Toggle -->
            <ControlTemplate x:Key="HUI_HeterochromiaBoxComponent">
                <StackPanel x:Name="HeterochromiaContainer">
                    <ContentControl x:Name="heterochromiaSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock Text="{Binding Source='h6f4a0631g9994g44ffg9468gaec6c6a62838', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" />
                    </ContentControl>

                    <ListBox x:Name="heterochromiaCarousel" Margin="0,12,0,0" 
                            Tag="Heterochromia" Template="{StaticResource HUI_CarouselTemplate}"
                            SelectedIndex="{Binding HeterochromiaEnabled, Converter={StaticResource BoolToIntConverter}, FallbackValue=0}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="heterochromiaSubheader"/>
                            </b:DataTrigger>
                            
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        
                        <ListBoxItem x:Name="disabled" Content="{Binding Source='h468f21a6g00c2g41c3g81d3gbe5291d6ab4d', Converter={StaticResource TranslatedStringConverter}}"/>
                        <ListBoxItem x:Name="enabled" Content="{Binding Source='h054025c0gd806g418agb58dg6b325823b7cd', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ListBox>

                </StackPanel>
            </ControlTemplate>

            <!-- Show Ancestry Toggle -->
            <ControlTemplate x:Key="HUI_ShowAncestryBoxComponent">
                <StackPanel x:Name="ShowAncestryContainer">
                    <ContentControl x:Name="showAncestrySubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock Text="{Binding Source='h6ea184f4g802bg4712gac5cgdeaee9390e44', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" />
                    </ContentControl>

                    <ListBox x:Name="showAncestryCarousel" Margin="0,12,0,0" 
                            Tag="ShowAncestry" Template="{StaticResource HUI_CarouselTemplate}" 
                            SelectedIndex="0">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="showAncestrySubheader"/>
                            </b:DataTrigger>
                            
                            <!-- Set SelectedIndex based on EmptyMaterialSelected -->
                            <b:DataTrigger Binding="{Binding AppearancePassive.EmptyMaterialSelected}" Value="True">
                                <b:ChangePropertyAction PropertyName="SelectedIndex" Value="0"/>
                            </b:DataTrigger>
                            <b:DataTrigger Binding="{Binding AppearancePassive.EmptyMaterialSelected}" Value="False">
                                <b:ChangePropertyAction PropertyName="SelectedIndex" Value="1"/>
                            </b:DataTrigger>
                            
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SelectedIndex, RelativeSource={RelativeSource AncestorType=ListBox}}" Operator="Equal" RightOperand="0"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetObject="{Binding AppearancePassive}" PropertyName="EmptyMaterialSelected" Value="True"/>
                                <b:InvokeCommandAction Command="{Binding DragonbornDraconicLinesToggleCommand}" CommandParameter="{Binding .}"/>
                            </b:EventTrigger>
                            
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding SelectedIndex, RelativeSource={RelativeSource AncestorType=ListBox}}" Operator="Equal" RightOperand="1"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:ChangePropertyAction TargetObject="{Binding AppearancePassive}" PropertyName="EmptyMaterialSelected" Value="False"/>
                                <b:InvokeCommandAction Command="{Binding DragonbornDraconicLinesToggleCommand}" CommandParameter="{Binding .}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        
                        <ListBoxItem x:Name="disabled" Content="{Binding Source='h468f21a6g00c2g41c3g81d3gbe5291d6ab4d', Converter={StaticResource TranslatedStringConverter}}"/>
                        <ListBoxItem x:Name="enabled" Content="{Binding Source='h054025c0gd806g418agb58dg6b325823b7cd', Converter={StaticResource TranslatedStringConverter}}"/>
                    </ListBox>

                </StackPanel>
            </ControlTemplate>

          <!-- Dynamic Carousels -->
            <!-- Genitals Selection -->
            <ControlTemplate x:Key="HUI_GenitaliaBoxComponent">
                <StackPanel x:Name="GenitaliaContainer" Visibility="{Binding CanShowGenitalia, Converter={StaticResource BoolToVisibleConverter}}">
                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding SelectedGenitalia}" Value="Male">
                            <b:ChangePropertyAction TargetName="genitaliaCarousel" PropertyName="SelectedIndex" Value="0"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding SelectedGenitalia}" Value="Female">
                            <b:ChangePropertyAction TargetName="genitaliaCarousel" PropertyName="SelectedIndex" Value="1"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding SelectedGenitalia}" Value="Neutral">
                            <b:ChangePropertyAction TargetName="genitaliaCarousel" PropertyName="SelectedIndex" Value="2"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>

                    <ContentControl x:Name="genitaliaSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock Text="{Binding Source='h72410e08g770dg48c8g98e8g5a5a933a2254', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}" />
                    </ContentControl>

                    <ListBox x:Name="genitaliaCarousel" ItemsSource="{Binding SelectableGenitals}" SelectedItem="{Binding SelectedGenitals}" 
                              Margin="0,12,0,0" Visibility="{Binding SelectableGenitals.Count, Converter={StaticResource CountToVisibilityConverter}}"
                              Template="{StaticResource HUI_CarouselTemplate}" Tag="Genitalia">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="genitaliaSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
                
                <ControlTemplate.Triggers>
                    <!-- Hide genitals when nudity is covered -->
                    <DataTrigger Binding="{Binding CoverNudity}" Value="True">
                        <Setter TargetName="GenitaliaContainer" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    
                    <!-- Hide genitals for companions (Daisy) - I got your back Swen -->
                    <DataTrigger Binding="{Binding CharacterCreationStep}" Value="Companion">
                        <Setter TargetName="GenitaliaContainer" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Voice Selector Component -->
            <ControlTemplate x:Key="HUI_VoiceBoxComponent">
                <StackPanel x:Name="VoiceContainer">
                    <ContentControl x:Name="voiceSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h81102ec7gef4dg42edg85b5g60d7fb1d13f9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="voiceCarousel" ItemsSource="{Binding Voices.ComboItems}" SelectedItem="{Binding Voices.SelectedItem}" 
                             Tag="Voice" Template="{StaticResource HUI_CarouselTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="voiceSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Voices}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Randomize Character -->
            <ControlTemplate x:Key="HUI_RandomizeCharacterBoxComponent">
                <StackPanel>
                    <ContentControl x:Name="randomizeSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock Text="{Binding Source='h1595c068g30a1g4efegbd7fg072665991b3b', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" />
                    </ContentControl>
                    
                    <ListBox x:Name="randomizeCarousel" Margin="0,12,0,0">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="randomizeSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                        <ListBox.Template>
                            <ControlTemplate>
                                <ContentControl x:Name="base" ls:MoveFocus.Focusable="True" Focusable="True" Template="{StaticResource CarouselButtonTemplate}" HorizontalAlignment="Center" Tag="notEnabled">
                                    <Grid>
                                        <ls:LSRepeatButton x:Name="leftBtn" BoundEvent="UILeft" IsEnabled="{Binding HasPreviousCharacter}" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,0,0,0" 
                                                Command="{Binding DataContext.RandomCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="prev" SoundID="{DynamicResource CarouselButtonSoundEvent}">
                                            <ls:LSRepeatButton.RenderTransform>
                                                <ScaleTransform ScaleX="-1" CenterX="32"/>
                                            </ls:LSRepeatButton.RenderTransform>
                                        </ls:LSRepeatButton>
                                        <ls:LSRepeatButton x:Name="rightBtn" BoundEvent="UIRight" IsEnabled="{Binding HasNextCharacter}" Style="{StaticResource IconCarouselRepeatButtonStyle}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,40,0" 
                                                Command="{Binding DataContext.RandomCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="next" SoundID="{DynamicResource CarouselButtonSoundEvent}"/>

                                        <TextBlock x:Name="cTxt" Text="{Binding Source='h13bbfa20g4e29g4974g90degb60346fdb770', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource CarouselText}"/>

                                        <!-- Randomize Action Button - appears when focused -->
                                        <StackPanel x:Name="randomizeButton" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,-5,100,0" Opacity="0">
                                            <Control x:Name="randomizeIcon" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}" Template="{StaticResource ControllerButton.ImageSwitcher}" Width="120" Height="120"/>
                                        </StackPanel>

                                        <ls:LSInputBinding x:Name="randomizeInput" BoundEvent="UIAccept" IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="LSInputBindingPressed">
                                                    <b:InvokeCommandAction Command="{Binding DataContext.RandomCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="new"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </ls:LSInputBinding>
                                    </Grid>
                                </ContentControl>
                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=base}" Value="True">
                                        <Setter TargetName="cTxt" Property="Foreground" Value="{StaticResource CCTextPrimary}"/>
                                        <Setter TargetName="randomizeButton" Property="Opacity" Value="1"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ListBox.Template>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>
            
          <!-- Grid Carousels -->
            <!-- Face Carousel Component -->
            <ControlTemplate x:Key="HUI_FaceBoxComponent">
                <!-- Face Carousel with Header Decorator -->
                <ContentControl x:Name="faceCarouselHeaderDecorator" Template="{StaticResource HUI_CarouselHeaderDecorator}">
                    <ListBox x:Name="faceCarousel" Tag="faces" 
                          ItemsSource="{Binding SelectableHeads}"
                          SelectedItem="{Binding SelectedHead}"
                          Template="{StaticResource HUI_CarouselGridTemplate}"
                          Visibility="{Binding SelectableHeads.Count, Converter={StaticResource CountToVisibilityConverter}}">
                        <b:Interaction.Triggers>
                            <!-- Focus this carousel when it becomes visible -->
                            <b:DataTrigger Binding="{Binding Path=Visibility, RelativeSource={RelativeSource Self}}" Value="Visible">
                                <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=faceCarousel}"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </ContentControl>
            </ControlTemplate>
             
            <!-- Hair Carousel Component -->
            <ControlTemplate x:Key="HUI_HairBoxComponent">
                <!-- Hair Carousel with Header Decorator -->
                <ContentControl x:Name="hairCarouselHeaderDecorator" Template="{StaticResource HUI_CarouselHeaderDecorator}">
                    <ListBox x:Name="hairCarousel" Tag="hairs" 
                          ItemsSource="{Binding SelectableHair}"
                          SelectedItem="{Binding SelectedHair}"
                          Template="{StaticResource HUI_CarouselGridTemplate}"
                          Visibility="{Binding SelectableHair.Count, Converter={StaticResource CountToVisibilityConverter}}">
                    </ListBox>
                </ContentControl>
            </ControlTemplate>

            <!-- Facial Hair Carousel Component -->
            <ControlTemplate x:Key="HUI_FacialHairBoxComponent">
              <StackPanel Visibility="{Binding SelectableBeards.Count, Converter={StaticResource CountToVisibilityConverter}}">

                
                <ContentControl x:Name="facialHairSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h5060d1edg2799g4388g9203gc42e380c68f8', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                </ContentControl>
                <!-- Facial Hair Carousel with Header Decorator -->
                <ListBox x:Name="facialHairCarousel" Tag="facialHairs" 
                      ItemsSource="{Binding SelectableBeards}"
                      SelectedItem="{Binding SelectedBeard}"
                      Template="{StaticResource HUI_CarouselGridTemplate}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="facialHairSubheader"/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </StackPanel>
            </ControlTemplate>

            <!-- Makeup Carousel Component -->
            <ControlTemplate x:Key="HUI_MakeupBoxComponent">
                <!-- Makeup Carousel with Header Decorator -->
                <ContentControl x:Name="makeupCarouselHeaderDecorator" Template="{StaticResource HUI_CarouselHeaderDecorator}">
                    <ListBox x:Name="makeupCarousel" Tag="makeup" 
                          ItemsSource="{Binding SelectableMakeup}"
                          SelectedItem="{Binding SelectedMakeup}"
                          Template="{StaticResource HUI_CarouselGridTemplate}"
                          Visibility="{Binding SelectableMakeup.Count, Converter={StaticResource CountToVisibilityConverter}}">
                        <b:Interaction.Triggers>
                            <!-- Focus this carousel when it becomes visible -->
                            <b:DataTrigger Binding="{Binding Path=Visibility, RelativeSource={RelativeSource Self}}" Value="Visible">
                                <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=makeupCarousel}"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </ContentControl>
            </ControlTemplate>

            <!-- Tattoo Carousel Component -->
            <ControlTemplate x:Key="HUI_TattooBoxComponent">
                <!-- Tattoo Carousel with Header Decorator -->
                <ContentControl x:Name="tattooCarouselHeaderDecorator" Template="{StaticResource HUI_CarouselHeaderDecorator}">
                    <ListBox x:Name="tattooCarousel" Tag="tattoos" 
                          ItemsSource="{Binding SelectableTattoos}"
                          SelectedItem="{Binding SelectedTattoo}"
                          Template="{StaticResource HUI_CarouselGridTemplate}"
                          Visibility="{Binding SelectableTattoos.Count, Converter={StaticResource CountToVisibilityConverter}}">
                        <b:Interaction.Triggers>
                            <!-- Focus this carousel when it becomes visible -->
                            <b:DataTrigger Binding="{Binding Path=Visibility, RelativeSource={RelativeSource Self}}" Value="Visible">
                                <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=tattooCarousel}"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </ContentControl>
                
                <ControlTemplate.Triggers>
                    <!-- Hide tattoos for Dragonborn -->
                    <DataTrigger Binding="{Binding IsDragonborn}" Value="True">
                        <Setter TargetName="tattooCarouselHeaderDecorator" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Piercings Carousel Component -->
            <ControlTemplate x:Key="HUI_PiercingsBoxComponent">
              <StackPanel>

                <ContentControl x:Name="piercingsSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h5458d095gcdb9g414bgacfdgdbd144fc2bd0', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                </ContentControl>
                <!-- Piercings Carousel with Header Decorator -->
                <ListBox x:Name="piercingCarousel" Tag="piercings" 
                      ItemsSource="{Binding SelectablePiercings}"
                      SelectedItem="{Binding SelectedPiercing}"
                      Template="{StaticResource HUI_CarouselGridTemplate}"
                      Visibility="{Binding SelectablePiercings.Count, Converter={StaticResource CountToVisibilityConverter}}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="piercingsSubheader"/>
                          </b:EventTrigger>
                          
                          <!-- Show close button when piercing list is open -->
                          <b:DataTrigger Binding="{Binding ElementName=piercingGrid, Path=Visibility}" Value="Visible">
                              <b:ChangePropertyAction TargetName="piercingCarousel" PropertyName="Tag" Value="piercings_listOpen"/>
                          </b:DataTrigger>
                          
                          <!-- Hide close button when piercing list is closed -->
                          <b:DataTrigger Binding="{Binding ElementName=piercingGrid, Path=Visibility}" Value="Collapsed">
                              <b:ChangePropertyAction TargetName="piercingCarousel" PropertyName="Tag" Value="piercings"/>
                          </b:DataTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </StackPanel>
            </ControlTemplate>

            <!-- Piercings Carousel Component -->
            <ControlTemplate x:Key="HUI_PiercingsSoloBoxComponent">
              <ContentControl x:Name="piercingSoloCarouselHeaderDecorator" Template="{StaticResource HUI_CarouselHeaderDecorator}">
                <ListBox x:Name="piercingSoloCarousel" Tag="piercingsSolo" 
                      ItemsSource="{Binding SelectablePiercings}"
                      SelectedItem="{Binding SelectedPiercing}"
                      Template="{StaticResource HUI_CarouselGridTemplate}"
                      Visibility="{Binding SelectablePiercings.Count, Converter={StaticResource CountToVisibilityConverter}}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="piercingsSubheader"/>
                          </b:EventTrigger>
                          
                          <!-- Show close button when piercing list is open -->
                          <b:DataTrigger Binding="{Binding ElementName=piercingGrid, Path=Visibility}" Value="Visible">
                              <b:ChangePropertyAction TargetName="piercingSoloCarousel" PropertyName="Tag" Value="piercings_listOpen"/>
                          </b:DataTrigger>
                          
                          <!-- Hide close button when piercing list is closed -->
                          <b:DataTrigger Binding="{Binding ElementName=piercingGrid, Path=Visibility}" Value="Collapsed">
                              <b:ChangePropertyAction TargetName="piercingSoloCarousel" PropertyName="Tag" Value="piercings"/>
                          </b:DataTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </ContentControl>
            </ControlTemplate>

            <!-- Scar Carousel Component -->
            <ControlTemplate x:Key="HUI_ScarsBoxComponent">
              <StackPanel x:Name="scarsContainer">

                <ContentControl x:Name="scarsSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h408d8f2bgca7eg4d20gb0bag4d4a3318f1c5', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                </ContentControl>
                <!-- Scar Carousel with Header Decorator -->
                <ListBox x:Name="scarCarousel" Tag="scars" 
                      ItemsSource="{Binding SelectableScars}"
                      SelectedItem="{Binding SelectedScar}"
                      Template="{StaticResource HUI_CarouselGridTemplate}"
                      Visibility="{Binding SelectableScars.Count, Converter={StaticResource CountToVisibilityConverter}}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="scarsSubheader"/>
                          </b:EventTrigger>

                          <!-- Show close button when scar list is open -->
                          <b:DataTrigger Binding="{Binding ElementName=scarGrid, Path=Visibility}" Value="Visible">
                              <b:ChangePropertyAction TargetName="scarCarousel" PropertyName="Tag" Value="scars_listOpen"/>
                          </b:DataTrigger>

                          <!-- Hide close button when scar list is closed -->
                          <b:DataTrigger Binding="{Binding ElementName=scarGrid, Path=Visibility}" Value="Collapsed">
                              <b:ChangePropertyAction TargetName="scarCarousel" PropertyName="Tag" Value="scars"/>
                          </b:DataTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </StackPanel>
              
              <ControlTemplate.Triggers>
                  <!-- Hide scars for Dragonborn -->
                  <DataTrigger Binding="{Binding IsDragonborn}" Value="True">
                      <Setter TargetName="scarsContainer" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  
                  <!-- Hide scars for Half-Illithid -->
                  <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.TadpoledState}" Value="HalfIllithid">
                      <Setter TargetName="scarsContainer" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  
                  <!-- Hide scars for Full Illithid -->
                  <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.TadpoledState}" Value="FullIllithid">
                      <Setter TargetName="scarsContainer" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Horn Carousel Component -->
            <ControlTemplate x:Key="HUI_HornsBoxComponent">
              <StackPanel>

                <ContentControl x:Name="tattooCarouselHeaderDecorator" Template="{StaticResource HUI_CarouselHeaderDecorator}">
                    <ListBox x:Name="hornCarousel" Tag="horns" 
                          ItemsSource="{Binding SelectableHorns}"
                          SelectedItem="{Binding SelectedHorn}"
                          Template="{StaticResource HUI_CarouselGridTemplate}"
                          Visibility="{Binding SelectableHorns.Count, Converter={StaticResource CountToVisibilityConverter}}">
                          <b:Interaction.Triggers>
                              <b:EventTrigger EventName="GotFocus">
                                  <ls:BringIntoViewAction TargetName="hornsSubheader"/>
                              </b:EventTrigger>

                              <!-- Show close button when horn list is open -->
                              <b:DataTrigger Binding="{Binding ElementName=hornsGrid, Path=Visibility}" Value="Visible">
                                  <b:ChangePropertyAction TargetName="hornCarousel" PropertyName="Tag" Value="horns_listOpen"/>
                              </b:DataTrigger>

                              <!-- Hide close button when horn list is closed -->
                              <b:DataTrigger Binding="{Binding ElementName=hornsGrid, Path=Visibility}" Value="Collapsed">
                                  <b:ChangePropertyAction TargetName="hornCarousel" PropertyName="Tag" Value="horns"/>
                              </b:DataTrigger>
                          </b:Interaction.Triggers>
                    </ListBox>
                </ContentControl>
              </StackPanel>
            </ControlTemplate>

            <!-- Scales Carousel Component -->
            <ControlTemplate x:Key="HUI_ScalesBoxComponent">
              <ContentControl x:Name="tattooCarouselHeaderDecorator" Template="{StaticResource HUI_CarouselHeaderDecorator}">

                <ListBox x:Name="scalesCarousel" Tag="scales" 
                      ItemsSource="{Binding SelectableScales}"
                      SelectedItem="{Binding SelectedScales}"
                      Template="{StaticResource HUI_CarouselGridTemplate}"
                      Visibility="{Binding SelectableScales.Count, Converter={StaticResource CountToVisibilityConverter}}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="scalesSubheader"/>
                          </b:EventTrigger>

                          <!-- Show close button when scale list is open -->
                          <b:DataTrigger Binding="{Binding ElementName=scalesGrid, Path=Visibility}" Value="Visible">
                              <b:ChangePropertyAction TargetName="scalesCarousel" PropertyName="Tag" Value="scales_listOpen"/>
                          </b:DataTrigger>

                          <!-- Hide close button when scale list is closed -->
                          <b:DataTrigger Binding="{Binding ElementName=scalesGrid, Path=Visibility}" Value="Collapsed">
                              <b:ChangePropertyAction TargetName="scalesCarousel" PropertyName="Tag" Value="scales"/>
                          </b:DataTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </ContentControl>
            </ControlTemplate>

            <!-- Tails Carousel Component -->
            <ControlTemplate x:Key="HUI_TailsBoxComponent">
              <StackPanel>

                <ContentControl x:Name="tailsSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hbb75a111g99e6g45afga2a6gaf73b748faa8', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                </ContentControl>
                <ListBox x:Name="tailsCarousel" Tag="tails" 
                      ItemsSource="{Binding SelectableTail}"
                      SelectedItem="{Binding SelectedTail}"
                      Template="{StaticResource HUI_CarouselGridTemplate}"
                      Visibility="{Binding SelectableTail.Count, Converter={StaticResource CountToVisibilityConverter}}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="tailsSubheader"/>
                          </b:EventTrigger>

                          <!-- Show close button when tail list is open -->
                          <b:DataTrigger Binding="{Binding ElementName=tailsGrid, Path=Visibility}" Value="Visible">
                              <b:ChangePropertyAction TargetName="tailsCarousel" PropertyName="Tag" Value="tails_listOpen"/>
                          </b:DataTrigger>

                          <!-- Hide close button when tail list is closed -->
                          <b:DataTrigger Binding="{Binding ElementName=tailsGrid, Path=Visibility}" Value="Collapsed">
                              <b:ChangePropertyAction TargetName="tailsCarousel" PropertyName="Tag" Value="tails"/>
                          </b:DataTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </StackPanel>
            </ControlTemplate>

            <!-- TopOfHead Carousel Component -->
            <ControlTemplate x:Key="HUI_TopOfHeadBoxComponent">
              <StackPanel>

                <ContentControl x:Name="topOfHeadSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h8a18511cgc2a5g47c8gac71g4f7111d9c0c9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                </ContentControl>
                <ListBox x:Name="topOfHeadCarousel" Tag="topOfHead" 
                      ItemsSource="{Binding SelectableTopOfHead}"
                      SelectedItem="{Binding SelectedTopOfHead}"
                      Template="{StaticResource HUI_CarouselGridTemplate}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="topOfHeadSubheader"/>
                          </b:EventTrigger>

                          <!-- Show close button when topOfHead list is open -->
                          <b:DataTrigger Binding="{Binding ElementName=topOfHeadGrid, Path=Visibility}" Value="Visible">
                              <b:ChangePropertyAction TargetName="topOfHeadCarousel" PropertyName="Tag" Value="topOfHead_listOpen"/>
                          </b:DataTrigger>

                          <!-- Hide close button when topOfHead list is closed -->
                          <b:DataTrigger Binding="{Binding ElementName=topOfHeadGrid, Path=Visibility}" Value="Collapsed">
                              <b:ChangePropertyAction TargetName="topOfHeadCarousel" PropertyName="Tag" Value="topOfHead"/>
                          </b:DataTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </StackPanel>
            </ControlTemplate>

            <!-- Chin Carousel Component -->
            <ControlTemplate x:Key="HUI_ChinBoxComponent">
              <StackPanel>

                <ContentControl x:Name="chinSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h51990b5dg8d36g4ef5gb5aegb8854eb585a2', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                </ContentControl>
                <ListBox x:Name="chinCarousel" Tag="chin" 
                      ItemsSource="{Binding SelectableChin}"
                      SelectedItem="{Binding SelectedChin}"
                      Template="{StaticResource HUI_CarouselGridTemplate}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="chinSubheader"/>
                          </b:EventTrigger>

                          <!-- Show close button when chin list is open -->
                          <b:DataTrigger Binding="{Binding ElementName=chinGrid, Path=Visibility}" Value="Visible">
                              <b:ChangePropertyAction TargetName="chinCarousel" PropertyName="Tag" Value="chin_listOpen"/>
                          </b:DataTrigger>

                          <!-- Hide close button when chin list is closed -->
                          <b:DataTrigger Binding="{Binding ElementName=chinGrid, Path=Visibility}" Value="Collapsed">
                              <b:ChangePropertyAction TargetName="chinCarousel" PropertyName="Tag" Value="chin"/>
                          </b:DataTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </StackPanel>
            </ControlTemplate>

            <!-- Jaw Carousel Component -->
            <ControlTemplate x:Key="HUI_JawBoxComponent">
              <StackPanel>

                <ContentControl x:Name="jawSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h735cf0ecg1ab8g46cag889aga32fdbd82da3', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                </ContentControl>
                <ListBox x:Name="jawCarousel" Tag="jaw" 
                      ItemsSource="{Binding SelectableJaw}"
                      SelectedItem="{Binding SelectedJaw}"
                      Template="{StaticResource HUI_CarouselGridTemplate}">
                      <b:Interaction.Triggers>
                          <b:EventTrigger EventName="GotFocus">
                              <ls:BringIntoViewAction TargetName="jawSubheader"/>
                          </b:EventTrigger>

                          <!-- Show close button when jaw list is open -->
                          <b:DataTrigger Binding="{Binding ElementName=jawGrid, Path=Visibility}" Value="Visible">
                              <b:ChangePropertyAction TargetName="jawCarousel" PropertyName="Tag" Value="jaw_listOpen"/>
                          </b:DataTrigger>

                          <!-- Hide close button when jaw list is closed -->
                          <b:DataTrigger Binding="{Binding ElementName=jawGrid, Path=Visibility}" Value="Collapsed">
                              <b:ChangePropertyAction TargetName="jawCarousel" PropertyName="Tag" Value="jaw"/>
                          </b:DataTrigger>
                      </b:Interaction.Triggers>
                </ListBox>
              </StackPanel>
            </ControlTemplate>

          <!-- Colour Carousels -->
            <!-- Skin Colour -->
            <ControlTemplate x:Key="HUI_SkinColourBoxComponent">
                <StackPanel x:Name="SkinColourContainer">
                    <ContentControl x:Name="skinColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hc81ba7bcgb2ccg4423ga050g253fd53ce2c9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="skinColourCarousel" ItemsSource="{Binding SelectableSkinColours}" SelectedItem="{Binding SelectedSkinColour}" 
                             Tag="skinColourSubheader" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableSkinColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Lip Color -->
            <ControlTemplate x:Key="HUI_LipTintBoxComponent">
                <StackPanel x:Name="LipTintContainer">
                    <ContentControl x:Name="lipTintSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='ha96c9b3bg5d8dg4ebbgb7a8gbefe66c7b781', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="lipTintCarousel" ItemsSource="{Binding SelectableLipsMakeupColours}" SelectedItem="{Binding SelectedLipsMakeupColour}" 
                             Tag="LipColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="GotFocus">
                                <ls:BringIntoViewAction TargetName="lipTintSubheader"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableLipsMakeupColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Hair Colour -->
            <ControlTemplate x:Key="HUI_HairColourBoxComponent">
                <StackPanel x:Name="HairColourContainer">
                    <ContentControl x:Name="hairColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h6ed36c54g1a3dg4c46g9987gd5882613ae05', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="hairColourCarousel" ItemsSource="{Binding SelectableHairColours}" SelectedItem="{Binding SelectedHairColour}" 
                             Tag="HairColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="hairColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableSkinColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Hair Greying Colour -->
            <ControlTemplate x:Key="HUI_HairGreyingColourBoxComponent">
                <StackPanel x:Name="HairGreyingColourContainer">
                    <ContentControl x:Name="hairGreyingColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hb85e6761gd73bg4fc1g8ff3g4081ff97694a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="hairGreyingColourCarousel" ItemsSource="{Binding SelectableGrayingColours}" SelectedItem="{Binding SelectedGrayingColour}" 
                             Tag="HairGreyingColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="hairGreyingColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableSkinColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Hair Highlight Colour -->
            <ControlTemplate x:Key="HUI_HairHighlightColourBoxComponent">
                <StackPanel x:Name="HairHighlightColourContainer">
                    <ContentControl x:Name="hairHighlightColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h9d4a4e08g81cdg4259g8bd1g80b47dbda3f3', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="hairHighlightColourCarousel" ItemsSource="{Binding SelectableHighlightColours}" SelectedItem="{Binding SelectedHighlightColour}" 
                             Tag="HairHighlightColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="hairHighlightColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableSkinColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Eye Colour (Right Eye when heterochromia enabled) -->
            <ControlTemplate x:Key="HUI_EyeColourBoxComponent">
                <StackPanel x:Name="EyeColourContainer">
                    <b:Interaction.Triggers>
                        <!-- Change header text when heterochromia is enabled -->
                        <b:DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" Value="RightEyeHeader">
                            <b:ChangePropertyAction TargetName="eyeColourSubheaderText" PropertyName="Text" Value="Right Eye"/>
                        </b:DataTrigger>
                        <!-- Restore original header text when heterochromia is disabled -->
                        <b:DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" Value="">
                            <b:ChangePropertyAction TargetName="eyeColourSubheaderText" PropertyName="Text" Value="{Binding Source='h1203122ag1146g4759ga531g57ccd5ef36da', Converter={StaticResource TranslatedStringConverter}}"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>
                    <ContentControl x:Name="eyeColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock x:Name="eyeColourSubheaderText" 
                                   ls:TextBlockFormatter.SourceText="{Binding Source='h1203122ag1146g4759ga531g57ccd5ef36da', Converter={StaticResource TranslatedStringConverter}}" 
                                   Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="eyeColourCarousel" ItemsSource="{Binding SelectableEyeColours}" SelectedItem="{Binding SelectedEyeColour}" 
                             Tag="EyeColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="eyeColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableEyeColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Left Eye Colour (only visible when heterochromia enabled) -->
            <ControlTemplate x:Key="HUI_LeftEyeColourBoxComponent">
                <StackPanel x:Name="LeftEyeColourContainer">
                    <ContentControl x:Name="leftEyeColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h2b53de1fg6bedg414dg9516g924fac56690d', Converter={StaticResource TranslatedStringConverter}}" 
                                   Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>
                    
                    <ListBox x:Name="leftEyeColourCarousel" ItemsSource="{Binding SelectableEyeColours}" SelectedItem="{Binding SelectedHeterochromiaEyeColour}" 
                             Tag="EyeColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="leftEyeColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableEyeColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Eye Makeup Colour -->
            <ControlTemplate x:Key="HUI_MakeupColourBoxComponent">
                <StackPanel x:Name="MakeupColourContainer">
                    <ContentControl x:Name="makeupColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='hd98545bbg8f42g437dg8f70gcb5f7a1bda8b', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="makeupColourCarousel" ItemsSource="{Binding SelectableMakeupColours}" SelectedItem="{Binding SelectedMakeupColour}" 
                             Tag="MakeupColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="makeupColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableMakeupColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
                
                <ControlTemplate.Triggers>
                    <!-- Hide makeup colors when no makeup material is selected -->
                    <DataTrigger Binding="{Binding AppearanceMakeup.EmptyMaterialSelected}" Value="True">
                        <Setter TargetName="MakeupColourContainer" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Tattoo Colour -->
            <ControlTemplate x:Key="HUI_TattooColourBoxComponent">
                <StackPanel x:Name="TattooColourContainer">
                    <ContentControl x:Name="tattooColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h0c6d2890g6a16g4e20ga2a1gcb15afa6e8d3', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="tattooColourCarousel" ItemsSource="{Binding SelectableTattooColours}" SelectedItem="{Binding SelectedTattooColour}" 
                             Tag="TattooColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="tattooColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableMakeupColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
                
                <ControlTemplate.Triggers>
                    <!-- Hide tattoo colors for Dragonborn -->
                    <DataTrigger Binding="{Binding IsDragonborn}" Value="True">
                        <Setter TargetName="TattooColourContainer" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Horn Colour -->
            <ControlTemplate x:Key="HUI_HornColourBoxComponent">
                <StackPanel x:Name="HornColourContainer">
                    <ContentControl x:Name="hornColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h8f9581e8g4440g4cf5g8752g220535346a50', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="hornColourCarousel" ItemsSource="{Binding SelectableHornColours}" SelectedItem="{Binding SelectedHornColour}" 
                             Tag="HornColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="hornColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableHornColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Horn Tip Colour -->
            <ControlTemplate x:Key="HUI_HornTipColourBoxComponent">
                <StackPanel x:Name="HornTipColourContainer">
                    <ContentControl x:Name="hornTipColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h8f9581e8g4440g4cf5g8752g220535346a50', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="hornTipColourCarousel" ItemsSource="{Binding SelectableHornTipColours}" SelectedItem="{Binding SelectedHornTipColour}" 
                             Tag="HornColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="hornTipColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableHornTipColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

            <!-- Scales Colour -->
            <ControlTemplate x:Key="HUI_ScalesColourBoxComponent">
                <StackPanel x:Name="ScalesColourContainer">
                    <ContentControl x:Name="scalesColourSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h8f9581e8g4440g4cf5g8752g220535346a50', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource AppearanceCarouselTitleText}"/>
                    </ContentControl>

                    <ListBox x:Name="scalesColourCarousel" ItemsSource="{Binding SelectablePassiveColours}" SelectedItem="{Binding SelectedPassiveColour}" 
                             Tag="ScalesColour" Template="{StaticResource HUI_CarouselColourTemplate}">
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                <ls:BringIntoViewAction TargetName="scalesColourSubheader"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="SelectionChanged">
                                <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectablePassiveColours}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ListBox>
                </StackPanel>
            </ControlTemplate>

          <!-- Sliders -->
            <!-- Maturity/Age Slider -->
            <ControlTemplate x:Key="HUI_MaturityBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiMaturityIntensity" 
                            DataContext="{Binding ApperanceScalarAge}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            Tag="{Binding Source='hfcbe9131g86b0g46d7ga4afg5c3301c070bf', Converter={StaticResource TranslatedStringConverter}}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>              
            </ControlTemplate>
          
            <!-- Freckle Quantity Slider -->
            <ControlTemplate x:Key="HUI_FreckleQuantityBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiFreckleQuantityIntensity" 
                            DataContext="{Binding ApperanceScalarFreckles}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            Tag="{Binding Source='h6a8fb398g7b1ag443egb45eg53c46ebbe9a3', Converter={StaticResource TranslatedStringConverter}}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>
            </ControlTemplate>

            <!-- Freckle Intensity Slider -->
            <ControlTemplate x:Key="HUI_FreckleIntensityBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiFreckleIntensity" 
                            DataContext="{Binding ApperanceScalarFrecklesIntensity}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            Tag="{Binding Source='h63c9cb05g65f3g439dgb85bg9eb69a2cc894', Converter={StaticResource TranslatedStringConverter}}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>
            </ControlTemplate>

            <!-- Vitiligo -->
            <ControlTemplate x:Key="HUI_VitiligoBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiVitiligoIntensity" 
                            DataContext="{Binding ApperanceScalarVitiligo}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            Tag="{Binding Source='h8f8d1cc6g57adg486agbb58gcba376102c37', Converter={StaticResource TranslatedStringConverter}}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>
            </ControlTemplate>

            <!-- Lip Intensity -->
            <ControlTemplate x:Key="HUI_LipIntensityBoxComponent">
              <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                  <Slider x:Name="huiLipColorIntensity" 
                          DataContext="{Binding AppearanceLipsMakeup.ColorOptions[0]}" 
                          Style="{StaticResource HUI_CCSliderStyle}"
                          Tag="{Binding Source='hc93c40a6gf955g459bg835eg11152b6f0683', Converter={StaticResource TranslatedStringConverter}}"
                          ls:MoveFocus.Focusable="True"
                          Focusable="True"
                          Margin="0,0,0,20"/>
              </StackPanel>
            </ControlTemplate>

            <!-- Lip Metallic Finish -->
            <ControlTemplate x:Key="HUI_LipMetallicBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiMetallicIntensity" 
                        Tag="{Binding Source='hcdc5c4b6g12d8g4e3bga7a5gccbc0b640e14', Converter={StaticResource TranslatedStringConverter}}"
                            ls:AttachedProperties.InheritedTag="metallicIntensity" 
                            DataContext="{Binding AppearanceLipsMakeup.ColorOptions[1]}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>
            </ControlTemplate>

            <!-- Lip Glossy Finish -->
            <ControlTemplate x:Key="HUI_LipGlossyBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiGlossyIntensity" 
                            Tag="{Binding Source='h3f60bd19gd12bg47d9g8f1dg710885f13edc', Converter={StaticResource TranslatedStringConverter}}"
                            ls:AttachedProperties.InheritedTag="glossyIntensity" 
                            DataContext="{Binding AppearanceLipsMakeup.ColorOptions[2]}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>
            </ControlTemplate>

            <!-- Makeup Intensity -->
            <ControlTemplate x:Key="HUI_MakeupIntensityBoxComponent">
              <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                  <Slider x:Name="huiMakeupColorIntensity" 
                          DataContext="{Binding AppearanceMakeup.ColorOptions[0]}" 
                          Style="{StaticResource HUI_CCSliderStyle}"
                          Tag="{Binding Source='hc93c40a6gf955g459bg835eg11152b6f0683', Converter={StaticResource TranslatedStringConverter}}"
                          ls:MoveFocus.Focusable="True"
                          Focusable="True"
                          Margin="0,0,0,20"/>
              </StackPanel>
            </ControlTemplate>

            <!-- Lip Metallic Finish -->
            <ControlTemplate x:Key="HUI_MakeupMetallicBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiMakeupMetallicIntensity" 
                        Tag="{Binding Source='hcdc5c4b6g12d8g4e3bga7a5gccbc0b640e14', Converter={StaticResource TranslatedStringConverter}}"
                            ls:AttachedProperties.InheritedTag="metallicIntensity" 
                            DataContext="{Binding AppearanceMakeup.ColorOptions[1]}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>
            </ControlTemplate>

            <!-- Makeup Glossy Finish -->
            <ControlTemplate x:Key="HUI_MakeupGlossyBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiMakeupGlossyIntensity" 
                            Tag="{Binding Source='h3f60bd19gd12bg47d9g8f1dg710885f13edc', Converter={StaticResource TranslatedStringConverter}}"
                            ls:AttachedProperties.InheritedTag="glossyIntensity" 
                            DataContext="{Binding AppearanceMakeup.ColorOptions[2]}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>
            </ControlTemplate>

            <!-- Hair Greying Slider -->
            <ControlTemplate x:Key="HUI_HairGreyingIntensityBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiHairGreyIntensity" 
                            DataContext="{Binding AppearanceHairGraying.ColorOptions[0]}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            Tag="{Binding Source='hf9b80a67geb60g426cg82dcg19e1af9bab9b', Converter={StaticResource TranslatedStringConverter}}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>              
            </ControlTemplate>

            <!-- Hair Highlight Slider -->
            <ControlTemplate x:Key="HUI_HairHighlightIntensityBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiHairHighlightIntensity" 
                            DataContext="{Binding AppearanceHairHighlights.ColorOptions[0]}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            Tag="{Binding Source='h086c2fd7ge3d3g458egbc81g1986b837cb3f', Converter={StaticResource TranslatedStringConverter}}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>              
            </ControlTemplate>

            <!-- Tattoo Slider -->
            <ControlTemplate x:Key="HUI_TattooIntensityBoxComponent">
                <StackPanel HorizontalAlignment="Center" Margin="0,20,0,20">
                    <Slider x:Name="huiTattooIntensity" 
                            DataContext="{Binding AppearanceTattoos.ColorOptions[0]}" 
                            Style="{StaticResource HUI_CCSliderStyle}"
                            Tag="{Binding Source='h95f7bb65gd02dg4e1fg814fg9c97df4a8ce2', Converter={StaticResource TranslatedStringConverter}}"
                            ls:MoveFocus.Focusable="True"
                            Focusable="True"
                            Margin="0,0,0,20"/>
                </StackPanel>              
            </ControlTemplate>


        <!-- Appearance Tab Containers -->
             

          <!-- General Appearance Template -->
           <!-- Name, Randomize, Random Carousel, Body Type, Identity, Voice, Genitals -->
          <ControlTemplate x:Key="GeneralAppearanceTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="CharacterCreation_c" PropertyName="Tag" Value="HideExpandedGrid"/>
                              <!-- Set initial focus to the name input -->
                              <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=nameInput}"/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>

                      <ContentControl x:Name="generalAppearanceOpeningDecorator" Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <ContentControl x:Name="generalAppearanceHeader" Template="{StaticResource HUI_CarouselHeaderDecorator}" Grid.Row="1">
                          <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h4c12a52dgcd71g43b9ga266gf506b54b0c55', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}" Height="100" Margin="0,-10,0,10"/>
                      </ContentControl>
                      
                      <ScrollViewer Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                    VerticalScrollBarVisibility="Auto" Margin="0,0,0,0" Height="1400" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">
                              <Control x:Name="nameInput" Template="{StaticResource HUI_NamingBoxComponent}" />

                              <StackPanel x:Name="randomizeCharacter" HorizontalAlignment="Center" Margin="0,0,0,0">
                                  <ContentControl x:Name="randomizeSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                                      <TextBlock Text="{Binding Source='h1595c068g30a1g4efegbd7fg072665991b3b', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" />
                                  </ContentControl>
                                  
                                  <ListBox x:Name="randomizeCarousel" Margin="0,12,0,0" 
                                           Tag="Randomize" Template="{StaticResource HUI_CarouselTemplate}">
                                      <b:Interaction.Triggers>
                                          <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                              <ls:BringIntoViewAction TargetName="randomizeSubheader"/>
                                          </b:DataTrigger>
                                      </b:Interaction.Triggers>
                                  </ListBox>
                              </StackPanel>
                              <Control x:Name="bodyType" Template="{StaticResource HUI_BodyTypeBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="identity" Template="{StaticResource HUI_IdentityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="voice" Template="{StaticResource HUI_VoiceBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="genitals" Template="{StaticResource HUI_GenitaliaBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
              
              <ControlTemplate.Triggers>
                  <!-- Voice visibility - Hide if 1 or less are available -->
                  <DataTrigger Binding="{Binding Voices.ComboItems.Count, Converter={StaticResource LessThanConverter}, ConverterParameter=2}" Value="True">
                      <Setter TargetName="voice" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  
                  <!-- Random appearance visibility -->
                  <DataTrigger Binding="{Binding HasNewRandomAppearance}" Value="True">
                      <Setter TargetName="randomizeCharacter" Property="Visibility" Value="Visible"/>
                  </DataTrigger>
              </ControlTemplate.Triggers>
          </ControlTemplate>

          <!-- Face Appearance Template -->
           <!-- Face, Skin Colour, Maturity, Freckle Quantity, Freckle Intensity, Vitiligo, Heterochromia, Eye Colour/Right & Left Eye Colour -->
          <ControlTemplate x:Key="FaceAppearanceTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="faceVisual" PropertyName="Tag" Value=""/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>

                      <ContentControl Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <Control x:Name="faceVisual" Template="{StaticResource HUI_FaceBoxComponent}" Grid.Row="1" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                      <!-- Hidden element to store the focused carousel for dynamic focus restoration -->
                      <ContentControl x:Name="focusedCarouselStorage" Visibility="Collapsed" Grid.Row="2"/>
                      
                      <ScrollViewer x:Name="faceAppearanceScroller" Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                        VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,10,0,0" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" VerticalAlignment="Stretch">

                              <ListBox x:Name="faceGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedGrid}"
                                       ItemsSource="{Binding SelectableHeads}"
                                       SelectedItem="{Binding SelectedHead}"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,0,0,0">
                                  <b:Interaction.Triggers>
                                      <!-- Show grid when scroller Tag is "ShowFaceGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=faceAppearanceScroller, Path=Tag}" Value="ShowFaceGrid">
                                          <b:ChangePropertyAction TargetName="faceGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="faceGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="faceAppearanceScroller" PropertyName="Tag" Value="FaceGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=faceGrid}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Hide grid when scroller Tag is "HideFaceGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=faceAppearanceScroller, Path=Tag}" Value="HideFaceGrid">
                                          <b:ChangePropertyAction TargetName="faceGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="faceGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="faceAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=faceGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="faceGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="faceGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="faceAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>

                              <Control x:Name="skinColour" Template="{StaticResource HUI_SkinColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                              <Control x:Name="heterochromia" Template="{StaticResource HUI_HeterochromiaBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="eyeColour" Template="{StaticResource HUI_EyeColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0">
                                  <b:Interaction.Triggers>
                                      <!-- Change header from "Eye Colour" to "Right Eye" when heterochromia is enabled -->
                                      <b:DataTrigger Binding="{Binding HeterochromiaEnabled}" Value="True">
                                          <b:ChangePropertyAction TargetName="eyeColour" PropertyName="Tag" Value="RightEyeHeader"/>
                                      </b:DataTrigger>
                                      <b:DataTrigger Binding="{Binding HeterochromiaEnabled}" Value="False">
                                          <b:ChangePropertyAction TargetName="eyeColour" PropertyName="Tag" Value=""/>
                                      </b:DataTrigger>
                                  </b:Interaction.Triggers>
                              </Control>
                              <Control x:Name="leftEyeColour" Template="{StaticResource HUI_LeftEyeColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0">
                                  <Control.Style>
                                      <Style TargetType="Control">
                                          <Setter Property="Height" Value="0"/>
                                          <Setter Property="IsEnabled" Value="False"/>
                                          <Setter Property="IsHitTestVisible" Value="False"/>
                                          <Setter Property="Focusable" Value="False"/>
                                          <Setter Property="ls:MoveFocus.Focusable" Value="False"/>
                                          <Style.Triggers>
                                              <DataTrigger Binding="{Binding HeterochromiaEnabled}" Value="True">
                                                  <Setter Property="Height" Value="Auto"/>
                                                  <Setter Property="IsEnabled" Value="True"/>
                                                  <Setter Property="IsHitTestVisible" Value="True"/>
                                              </DataTrigger>
                                          </Style.Triggers>
                                      </Style>
                                  </Control.Style>
                              </Control>
                              <Control x:Name="maturity" Template="{StaticResource HUI_MaturityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="freckleQuantity" Template="{StaticResource HUI_FreckleQuantityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="freckleIntensity" Template="{StaticResource HUI_FreckleIntensityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="vitiligo" Template="{StaticResource HUI_VitiligoBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
              
              <ControlTemplate.Triggers>
                  <!-- Dragonborn restrictions -->
                  <DataTrigger Binding="{Binding IsDragonborn}" Value="True">
                      <Setter TargetName="maturity" Property="Visibility" Value="Collapsed"/>
                      <Setter TargetName="freckleQuantity" Property="Visibility" Value="Collapsed"/>
                      <Setter TargetName="freckleIntensity" Property="Visibility" Value="Collapsed"/>
                      <Setter TargetName="vitiligo" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>

              </ControlTemplate.Triggers>
          </ControlTemplate>

          <!-- Hair Appearance Template -->
           <!-- Hair, Facial Hair, Hair Colour, Highlights + Intensity, Greying + Intensity -->
          <ControlTemplate x:Key="HairAppearanceTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="hairVisual" PropertyName="Tag" Value=""/>
                              <b:ChangePropertyAction TargetName="hairAppearanceScroller" PropertyName="Tag" Value=""/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>
                      
                      <ContentControl Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <Control x:Name="hairVisual" Template="{StaticResource HUI_HairBoxComponent}" Grid.Row="1" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                      <!-- Hidden element to store the focused carousel for dynamic focus restoration -->
                      <ContentControl x:Name="focusedCarouselStorage" Visibility="Collapsed" Grid.Row="2"/>
                      
                      <ScrollViewer x:Name="hairAppearanceScroller" Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                        VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,10,0,0" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" VerticalAlignment="Stretch">

                              <ListBox x:Name="hairGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedGrid}"
                                       ItemsSource="{Binding SelectableHair}"
                                       SelectedItem="{Binding SelectedHair}"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,0,0,0">
                                  <b:Interaction.Triggers>
                                      <!-- Show grid when scroller Tag is "ShowHairGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=hairAppearanceScroller, Path=Tag}" Value="ShowHairGrid">
                                          <b:ChangePropertyAction TargetName="hairGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="hairGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="hairAppearanceScroller" PropertyName="Tag" Value="HairGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=hairGrid}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Hide grid when scroller Tag is "HideHairGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=hairAppearanceScroller, Path=Tag}" Value="HideHairGrid">
                                          <b:ChangePropertyAction TargetName="hairGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="hairGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="hairAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=hairGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="hairGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="hairGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="hairAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>

                              <Control x:Name="facialHair" Template="{StaticResource HUI_FacialHairBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              
                              <ListBox x:Name="facialHairGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedGrid}"
                                       ItemsSource="{Binding SelectableBeards}"
                                       SelectedItem="{Binding SelectedBeard}"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,20,0,20">
                                  <b:Interaction.Triggers>
                                      <!-- Show grid when scroller Tag is "ShowHairGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=hairAppearanceScroller, Path=Tag}" Value="ShowFacialHairGrid">
                                          <b:ChangePropertyAction TargetName="facialHairGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="facialHairGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="hairAppearanceScroller" PropertyName="Tag" Value="FacialHairGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=facialHairGrid}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Hide grid when scroller Tag is "HideHairGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=hairAppearanceScroller, Path=Tag}" Value="HideFacialHairGrid">
                                          <b:ChangePropertyAction TargetName="facialHairGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="facialHairGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="hairAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=facialHairGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="facialHairGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="facialHairGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="hairAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>
                              
                              <Control x:Name="hairColour" Template="{StaticResource HUI_HairColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="hairGreyingColour" Template="{StaticResource HUI_HairGreyingColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="hairGreyingIntensity" Template="{StaticResource HUI_HairGreyingIntensityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="hairHighlightColour" Template="{StaticResource HUI_HairHighlightColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="hairHighlightIntensity" Template="{StaticResource HUI_HairHighlightIntensityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
              
              <ControlTemplate.Triggers>

              </ControlTemplate.Triggers>
          </ControlTemplate>

          <!-- Makeup Appearance Template -->
           <!-- Eye & Lip Makeup + Intensity, Metallic, Glossy-->
          <ControlTemplate x:Key="MakeupAppearanceTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="makeupVisual" PropertyName="Tag" Value=""/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>
                      
                      <ContentControl Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <Control x:Name="makeupVisual" Template="{StaticResource HUI_MakeupBoxComponent}" Grid.Row="1" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                      <!-- Hidden element to store the focused carousel for dynamic focus restoration -->
                      <ContentControl x:Name="focusedCarouselStorage" Visibility="Collapsed" Grid.Row="2"/>
                      
                      <ScrollViewer x:Name="eyeAppearanceScroller" Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                        VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,10,0,0" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" VerticalAlignment="Stretch">
                              <ListBox x:Name="makeupGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedGrid}"
                                       ItemsSource="{Binding SelectableMakeup}"
                                       SelectedItem="{Binding SelectedMakeup}"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,0,0,0">
                                  <b:Interaction.Triggers>
                                      <!-- Show grid when scroller Tag is "ShowMakeupGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=eyeAppearanceScroller, Path=Tag}" Value="ShowMakeupGrid">
                                          <b:ChangePropertyAction TargetName="makeupGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="makeupGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="eyeAppearanceScroller" PropertyName="Tag" Value="MakeupGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=makeupGrid}"/>
                                      </b:DataTrigger>

                                      <!-- Hide grid when scroller Tag is "HideMakeupGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=eyeAppearanceScroller, Path=Tag}" Value="HideMakeupGrid">
                                          <b:ChangePropertyAction TargetName="makeupGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="makeupGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="eyeAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=makeupGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="makeupGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="makeupGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="eyeAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Keep ValueChanged trigger for game mechanics -->
                                      <b:EventTrigger EventName="SelectionChanged">
                                          <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableMakeup}"/>
                                      </b:EventTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>
                              <Control x:Name="makeupColour" Template="{StaticResource HUI_MakeupColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="makeupIntensity" Template="{StaticResource HUI_MakeupIntensityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="makeupGlossy" Template="{StaticResource HUI_MakeupGlossyBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="makeupMetallic" Template="{StaticResource HUI_MakeupMetallicBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                              <Control x:Name="lipMakeupColour" Template="{StaticResource HUI_LipTintBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="lipMakeupIntensity" Template="{StaticResource HUI_LipIntensityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="lipMakeupGlossy" Template="{StaticResource HUI_LipGlossyBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="lipMakeupMetallic" Template="{StaticResource HUI_LipMetallicBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
              
              <ControlTemplate.Triggers>
                  <!-- Dragonborn restrictions -->
                  <DataTrigger Binding="{Binding IsDragonborn}" Value="True">
                      <Setter TargetName="lipMakeupMetallic" Property="Visibility" Value="Collapsed"/>
                      <Setter TargetName="lipMakeupGlossy" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>

              </ControlTemplate.Triggers>
          </ControlTemplate>

          <!-- Accessories Appearance Template -->
           <!-- Tattoo Style + Intensity, Scars, Piercings -->
          <ControlTemplate x:Key="AccessoriesAppearanceTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="makeupVisual" PropertyName="Tag" Value=""/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>
                      
                      <ContentControl Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <Control x:Name="tattooVisual" Template="{StaticResource HUI_TattooBoxComponent}" Grid.Row="1" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                      <Control x:Name="piercingsSoloVisual" Template="{StaticResource HUI_PiercingsSoloBoxComponent}" Grid.Row="1" HorizontalAlignment="Center" Margin="0,0,0,0" Visibility="Collapsed"/>

                      <!-- Hidden element to store the focused carousel for dynamic focus restoration -->
                      <ContentControl x:Name="focusedCarouselStorage" Visibility="Collapsed" Grid.Row="2"/>
                      
                      <ScrollViewer x:Name="accessoriesAppearanceScroller" Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                        VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,10,0,0" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" VerticalAlignment="Stretch">
                              <ListBox x:Name="tattooGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedGrid}"
                                       ItemsSource="{Binding SelectableTattoos}"
                                       SelectedItem="{Binding SelectedTattoo}"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,0,0,0">
                                  <b:Interaction.Triggers>
                                      <!-- Show grid when scroller Tag is "ShowTattooGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=accessoriesAppearanceScroller, Path=Tag}" Value="ShowTattooGrid">
                                          <b:ChangePropertyAction TargetName="tattooGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="tattooGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value="TattooGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=tattooGrid}"/>
                                      </b:DataTrigger>

                                      <!-- Hide grid when scroller Tag is "HideTattooGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=accessoriesAppearanceScroller, Path=Tag}" Value="HideTattooGrid">
                                          <b:ChangePropertyAction TargetName="tattooGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="tattooGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=tattooGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="tattooGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="tattooGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Keep ValueChanged trigger for game mechanics -->
                                      <b:EventTrigger EventName="SelectionChanged">
                                          <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableTattoos}"/>
                                      </b:EventTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>
                              <Control x:Name="tattooColour" Template="{StaticResource HUI_TattooColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"
                                 Visibility="{Binding AppearanceTattoos.EmptyMaterialSelected, Converter={StaticResource BoolToCollapsedConverter}}"/>
                              <Control x:Name="tattooIntensity" Template="{StaticResource HUI_TattooIntensityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"
                                 Visibility="{Binding AppearanceTattoos.EmptyMaterialSelected, Converter={StaticResource BoolToCollapsedConverter}}"/>
                              <Control x:Name="scars" Template="{StaticResource HUI_ScarsBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              
                              
                              <ListBox x:Name="scarGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedGrid}"
                                       ItemsSource="{Binding SelectableScars}"
                                       SelectedItem="{Binding SelectedScar}"
                                       IsSynchronizedWithCurrentItem="True"
                                       KeyboardNavigation.DirectionalNavigation="Continue"
                                       IsTabStop="True"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,20,0,20">
                                  <b:Interaction.Triggers>
                                      <!-- Selection change sound effect -->
                                      <b:PropertyChangedTrigger Binding="{Binding ElementName=scarGrid, Path=SelectedItem}">
                                          <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                                      </b:PropertyChangedTrigger>
                                      
                                      <!-- Show grid when scroller Tag is "ShowScarGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=accessoriesAppearanceScroller, Path=Tag}" Value="ShowScarGrid">
                                          <b:ChangePropertyAction TargetName="scarGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="scarGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value="ScarGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=scarGrid}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Hide grid when scroller Tag is "HideScarGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=accessoriesAppearanceScroller, Path=Tag}" Value="HideScarGrid">
                                          <b:ChangePropertyAction TargetName="scarGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="scarGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=scarGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="scarGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="scarGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>
                              
                              <Control x:Name="piercings" Template="{StaticResource HUI_PiercingsBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              
                              
                              <ListBox x:Name="piercingGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedList}"
                                       Style="{StaticResource HUI_AppearanceListStyle}"
                                       ItemsSource="{Binding SelectablePiercings}"
                                       SelectedItem="{Binding SelectedPiercing}"
                                       IsSynchronizedWithCurrentItem="True"
                                       KeyboardNavigation.DirectionalNavigation="Continue"
                                       IsTabStop="True"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,20,0,20">
                                  <b:Interaction.Triggers>
                                      <!-- Selection change sound effect -->
                                      <b:PropertyChangedTrigger Binding="{Binding ElementName=piercingGrid, Path=SelectedItem}">
                                          <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                                      </b:PropertyChangedTrigger>
                                      
                                      <!-- Show grid when scroller Tag is "ShowPiercingGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=accessoriesAppearanceScroller, Path=Tag}" Value="ShowPiercingGrid">
                                          <b:ChangePropertyAction TargetName="piercingGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="piercingGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value="PiercingGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=piercingGrid}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Hide grid when scroller Tag is "HidepiercingGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=accessoriesAppearanceScroller, Path=Tag}" Value="HidePiercingGrid">
                                          <b:ChangePropertyAction TargetName="piercingGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="piercingGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=piercingGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="piercingGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="piercingGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="accessoriesAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>

                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
              
              <ControlTemplate.Triggers>
                  <!-- Show piercingsSoloVisual and hide piercings for Dragonborn -->
                  <DataTrigger Binding="{Binding IsDragonborn}" Value="True">
                      <Setter TargetName="piercingsSoloVisual" Property="Visibility" Value="Visible"/>
                      <Setter TargetName="piercings" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  
                  <!-- Show piercingsSoloVisual and hide piercings for Half Illithid -->
                  <DataTrigger Binding="{Binding TadpoledState}" Value="HalfIllithid">
                      <Setter TargetName="piercingsSoloVisual" Property="Visibility" Value="Visible"/>
                      <Setter TargetName="piercings" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  
                  <!-- Show piercingsSoloVisual and hide piercings for Full Illithid -->
                  <DataTrigger Binding="{Binding TadpoledState}" Value="FullIllithid">
                      <Setter TargetName="piercingsSoloVisual" Property="Visibility" Value="Visible"/>
                      <Setter TargetName="piercings" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
              </ControlTemplate.Triggers>
          </ControlTemplate>

          <!-- Features Appearance Template -->
            <!-- Tail, Top of Head, Chin, Jaw-->
          <ControlTemplate x:Key="FeaturesAppearanceTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="makeupVisual" PropertyName="Tag" Value=""/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>
                      
                      <ContentControl Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <ContentControl x:Name="featuresAppearanceHeader" Template="{StaticResource HUI_CarouselHeaderDecorator}" Grid.Row="1">
                          <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h97cb756egd22dg488aga292g7cd93aeaaa6e', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}" Height="100" Margin="0,-10,0,10"/>
                      </ContentControl>
                      <!-- Hidden element to store the focused carousel for dynamic focus restoration -->
                      <ContentControl x:Name="focusedCarouselStorage" Visibility="Collapsed" Grid.Row="2"/>
                      
                      <ScrollViewer x:Name="featuresAppearanceScroller" Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                        VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,10,0,0" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" VerticalAlignment="Stretch">

                              <Control x:Name="tails" Template="{StaticResource HUI_TailsBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0" Visibility="{Binding SelectableTail.Count, Converter={StaticResource CountToVisibilityConverter}}"/>

                                <ListBox x:Name="tailsGrid" 
                                        Template="{StaticResource HUI_CarouselExpandedGrid}"
                                        ItemsSource="{Binding SelectableTail}"
                                        SelectedItem="{Binding SelectedTail}"
                                        IsSynchronizedWithCurrentItem="True"
                                        KeyboardNavigation.DirectionalNavigation="Continue"
                                        IsTabStop="True"
                                        Visibility="Collapsed"
                                        HorizontalAlignment="Center" 
                                        Margin="0,20,0,20">
                                    <b:Interaction.Triggers>
                                        <!-- Selection change sound effect -->
                                        <b:PropertyChangedTrigger Binding="{Binding ElementName=tailsGrid, Path=SelectedItem}">
                                            <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                                        </b:PropertyChangedTrigger>

                                        <!-- Show grid when scroller Tag is "ShowTailGrid" -->
                                        <b:DataTrigger Binding="{Binding ElementName=featuresAppearanceScroller, Path=Tag}" Value="ShowTailGrid">
                                            <b:ChangePropertyAction TargetName="tailsGrid" PropertyName="Tag" Value="Visible"/>
                                            <b:ChangePropertyAction TargetName="tailsGrid" PropertyName="Visibility" Value="Visible"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value="TailGridOpen"/>
                                            <ls:BringIntoViewAction TargetObject="{Binding ElementName=tailsGrid}"/>
                                        </b:DataTrigger>

                                        <!-- Hide grid when scroller Tag is "HideTailGrid" -->
                                        <b:DataTrigger Binding="{Binding ElementName=featuresAppearanceScroller, Path=Tag}" Value="HideTailGrid">
                                            <b:ChangePropertyAction TargetName="tailsGrid" PropertyName="Tag" Value=""/>
                                            <b:ChangePropertyAction TargetName="tailsGrid" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value=""/>
                                            <!-- Set focus back to the stored carousel reference -->
                                            <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                        </b:DataTrigger>
                                        
                                        <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                        <b:DataTrigger Binding="{Binding ElementName=tailsGrid, Path=Tag}" Value="GridClosed">
                                            <b:ChangePropertyAction TargetName="tailsGrid" PropertyName="Tag" Value=""/>
                                            <b:ChangePropertyAction TargetName="tailsGrid" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value=""/>
                                            <!-- Set focus back to the stored carousel reference -->
                                            <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                        </b:DataTrigger>
                                    </b:Interaction.Triggers>
                                </ListBox>

                              <Control x:Name="topOfHeads" Template="{StaticResource HUI_TopOfHeadBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                                <ListBox x:Name="topOfHeadGrid" 
                                        Template="{StaticResource HUI_CarouselExpandedGrid}"
                                        ItemsSource="{Binding SelectableTopOfHead}"
                                        SelectedItem="{Binding SelectedTopOfHead}"
                                        IsSynchronizedWithCurrentItem="True"
                                        KeyboardNavigation.DirectionalNavigation="Continue"
                                        IsTabStop="True"
                                        Visibility="Collapsed"
                                        HorizontalAlignment="Center" 
                                        Margin="0,20,0,20">
                                    <b:Interaction.Triggers>
                                        <!-- Selection change sound effect -->
                                        <b:PropertyChangedTrigger Binding="{Binding ElementName=topOfHeadGrid, Path=SelectedItem}">
                                            <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                                        </b:PropertyChangedTrigger>

                                        <!-- Show grid when scroller Tag is "ShowTopOfHeadGrid" -->
                                        <b:DataTrigger Binding="{Binding ElementName=featuresAppearanceScroller, Path=Tag}" Value="ShowTopOfHeadGrid">
                                            <b:ChangePropertyAction TargetName="topOfHeadGrid" PropertyName="Tag" Value="Visible"/>
                                            <b:ChangePropertyAction TargetName="topOfHeadGrid" PropertyName="Visibility" Value="Visible"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value="TopOfHeadGridOpen"/>
                                            <ls:BringIntoViewAction TargetObject="{Binding ElementName=topOfHeadGrid}"/>
                                        </b:DataTrigger>

                                        <!-- Hide grid when scroller Tag is "HideTopOfHeadGrid" -->
                                        <b:DataTrigger Binding="{Binding ElementName=featuresAppearanceScroller, Path=Tag}" Value="HideTopOfHeadGrid">
                                            <b:ChangePropertyAction TargetName="topOfHeadGrid" PropertyName="Tag" Value=""/>
                                            <b:ChangePropertyAction TargetName="topOfHeadGrid" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value=""/>
                                            <!-- Set focus back to the stored carousel reference -->
                                            <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                        </b:DataTrigger>
                                        
                                        <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                        <b:DataTrigger Binding="{Binding ElementName=topOfHeadGrid, Path=Tag}" Value="GridClosed">
                                            <b:ChangePropertyAction TargetName="topOfHeadGrid" PropertyName="Tag" Value=""/>
                                            <b:ChangePropertyAction TargetName="topOfHeadGrid" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value=""/>
                                            <!-- Set focus back to the stored carousel reference -->
                                            <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                        </b:DataTrigger>
                                    </b:Interaction.Triggers>
                                </ListBox>

                              <Control x:Name="chins" Template="{StaticResource HUI_ChinBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                                <ListBox x:Name="chinGrid" 
                                        Template="{StaticResource HUI_CarouselExpandedGrid}"
                                        ItemsSource="{Binding SelectableChin}"
                                        SelectedItem="{Binding SelectedChin}"
                                        IsSynchronizedWithCurrentItem="True"
                                        KeyboardNavigation.DirectionalNavigation="Continue"
                                        IsTabStop="True"
                                        Visibility="Collapsed"
                                        HorizontalAlignment="Center" 
                                        Margin="0,20,0,20">
                                    <b:Interaction.Triggers>
                                        <!-- Selection change sound effect -->
                                        <b:PropertyChangedTrigger Binding="{Binding ElementName=chinGrid, Path=SelectedItem}">
                                            <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                                        </b:PropertyChangedTrigger>

                                        <!-- Show grid when scroller Tag is "ShowChinGrid" -->
                                        <b:DataTrigger Binding="{Binding ElementName=featuresAppearanceScroller, Path=Tag}" Value="ShowChinGrid">
                                            <b:ChangePropertyAction TargetName="chinGrid" PropertyName="Tag" Value="Visible"/>
                                            <b:ChangePropertyAction TargetName="chinGrid" PropertyName="Visibility" Value="Visible"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value="ChinGridOpen"/>
                                            <ls:BringIntoViewAction TargetObject="{Binding ElementName=chinGrid}"/>
                                        </b:DataTrigger>

                                        <!-- Hide grid when scroller Tag is "HideChinGrid" -->
                                        <b:DataTrigger Binding="{Binding ElementName=featuresAppearanceScroller, Path=Tag}" Value="HideChinGrid">
                                            <b:ChangePropertyAction TargetName="chinGrid" PropertyName="Tag" Value=""/>
                                            <b:ChangePropertyAction TargetName="chinGrid" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value=""/>
                                            <!-- Set focus back to the stored carousel reference -->
                                            <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                        </b:DataTrigger>
                                        
                                        <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                        <b:DataTrigger Binding="{Binding ElementName=chinGrid, Path=Tag}" Value="GridClosed">
                                            <b:ChangePropertyAction TargetName="chinGrid" PropertyName="Tag" Value=""/>
                                            <b:ChangePropertyAction TargetName="chinGrid" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value=""/>
                                            <!-- Set focus back to the stored carousel reference -->
                                            <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                        </b:DataTrigger>
                                    </b:Interaction.Triggers>
                                </ListBox>

                              <Control x:Name="jaws" Template="{StaticResource HUI_JawBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                                <ListBox x:Name="jawGrid" 
                                        Template="{StaticResource HUI_CarouselExpandedGrid}"
                                        ItemsSource="{Binding SelectableJaw}"
                                        SelectedItem="{Binding SelectedJaw}"
                                        IsSynchronizedWithCurrentItem="True"
                                        KeyboardNavigation.DirectionalNavigation="Continue"
                                        IsTabStop="True"
                                        Visibility="Collapsed"
                                        HorizontalAlignment="Center" 
                                        Margin="0,20,0,20">
                                    <b:Interaction.Triggers>
                                        <!-- Selection change sound effect -->
                                        <b:PropertyChangedTrigger Binding="{Binding ElementName=jawGrid, Path=SelectedItem}">
                                            <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                                        </b:PropertyChangedTrigger>

                                        <!-- Show grid when scroller Tag is "ShowJawGrid" -->
                                        <b:DataTrigger Binding="{Binding ElementName=featuresAppearanceScroller, Path=Tag}" Value="ShowJawGrid">
                                            <b:ChangePropertyAction TargetName="jawGrid" PropertyName="Tag" Value="Visible"/>
                                            <b:ChangePropertyAction TargetName="jawGrid" PropertyName="Visibility" Value="Visible"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value="JawGridOpen"/>
                                            <ls:BringIntoViewAction TargetObject="{Binding ElementName=jawGrid}"/>
                                        </b:DataTrigger>

                                        <!-- Hide grid when scroller Tag is "HideJawGrid" -->
                                        <b:DataTrigger Binding="{Binding ElementName=featuresAppearanceScroller, Path=Tag}" Value="HideJawGrid">
                                            <b:ChangePropertyAction TargetName="jawGrid" PropertyName="Tag" Value=""/>
                                            <b:ChangePropertyAction TargetName="jawGrid" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value=""/>
                                            <!-- Set focus back to the stored carousel reference -->
                                            <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                        </b:DataTrigger>
                                        
                                        <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                        <b:DataTrigger Binding="{Binding ElementName=jawGrid, Path=Tag}" Value="GridClosed">
                                            <b:ChangePropertyAction TargetName="jawGrid" PropertyName="Tag" Value=""/>
                                            <b:ChangePropertyAction TargetName="jawGrid" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="featuresAppearanceScroller" PropertyName="Tag" Value=""/>
                                            <!-- Set focus back to the stored carousel reference -->
                                            <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                        </b:DataTrigger>
                                    </b:Interaction.Triggers>
                                </ListBox>
                              
                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
          </ControlTemplate>

          <!-- Horns Appearance Template -->
           <!-- Horn Type, Horn Colour, Horn Tip Colour, Tails -->
          <ControlTemplate x:Key="HornsAppearanceTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="makeupVisual" PropertyName="Tag" Value=""/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>
                      
                      <ContentControl Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <Control x:Name="hornVisual" Template="{StaticResource HUI_HornsBoxComponent}" Grid.Row="1" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                      <!-- Hidden element to store the focused carousel for dynamic focus restoration -->
                      <ContentControl x:Name="focusedCarouselStorage" Visibility="Collapsed" Grid.Row="2"/>
                      
                      <ScrollViewer x:Name="hornAppearanceScroller" Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                        VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,10,0,0" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" VerticalAlignment="Stretch">
                              <ListBox x:Name="hornsGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedGrid}"
                                       ItemsSource="{Binding SelectableHorns}"
                                       SelectedItem="{Binding SelectedHorn}"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,0,0,0">
                                  <b:Interaction.Triggers>
                                      <!-- Show grid when scroller Tag is "ShowhornsGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=hornAppearanceScroller, Path=Tag}" Value="ShowhornsGrid">
                                          <b:ChangePropertyAction TargetName="hornsGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="hornsGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="hornAppearanceScroller" PropertyName="Tag" Value="hornsGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=hornsGrid}"/>
                                      </b:DataTrigger>

                                      <!-- Hide grid when scroller Tag is "HidehornsGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=hornAppearanceScroller, Path=Tag}" Value="HidehornsGrid">
                                          <b:ChangePropertyAction TargetName="hornsGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="hornsGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="hornAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=hornsGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="hornsGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="hornsGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="hornAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Keep ValueChanged trigger for game mechanics -->
                                      <b:EventTrigger EventName="SelectionChanged">
                                          <b:InvokeCommandAction Command="{Binding DataContext.ValueChanged, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding SelectableTattoos}"/>
                                      </b:EventTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>
                              <Control x:Name="hornColour" Template="{StaticResource HUI_HornColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="hornTipColour" Template="{StaticResource HUI_HornTipColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
          </ControlTemplate>

          <!-- Top of Head, Chin, Jaw, Tail Style -->

          <!-- Passive Features Appearance Template -->
          <ControlTemplate x:Key="PassiveFeaturesAppearanceTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="faceVisual" PropertyName="Tag" Value=""/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>
                      <ContentControl Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <Control x:Name="scalesVisual" Template="{StaticResource HUI_ScalesBoxComponent}" Grid.Row="1" HorizontalAlignment="Center" MaxWidth="1200" Margin="0,0,0,0"/>
                      <ContentControl x:Name="scalesHeaderDragonborn" Template="{StaticResource HUI_CarouselHeaderDecorator}" Visibility="Collapsed" Grid.Row="1" MaxWidth="1200" HorizontalAlignment="Center" Margin="0,20,0,0">
                          <TextBlock x:Name="draconicDragonbornColourHeader" ls:TextBlockFormatter.SourceText="{Binding Source='h861a433dgcc20g452bg9b1agde89d14c85c9', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}" Height="100" Margin="0,-10,0,10" />
                      </ContentControl>
                      <!-- Hidden element to store the focused carousel for dynamic focus restoration -->
                      <ContentControl x:Name="focusedCarouselStorage" Visibility="Collapsed" Grid.Row="2"/>
                      <Control x:Name="showAncestry" Template="{StaticResource HUI_ShowAncestryBoxComponent}" Grid.Row="2" HorizontalAlignment="Center" Margin="0,0,0,0" Visibility="Collapsed" />

                      <ScrollViewer x:Name="passiveAppearanceScroller" Style="{StaticResource gameplayPanelScrollViewerStyle}"  VerticalScrollBarVisibility="Auto"
                                Margin="0,50,0,0" Height="1200" Grid.Row="2">
                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}" VerticalAlignment="Stretch">
                              <ListBox x:Name="scalesGrid" 
                                       Template="{StaticResource HUI_CarouselExpandedGrid}"
                                       ItemsSource="{Binding SelectableScales}"
                                       SelectedItem="{Binding SelectedScales}"
                                       Visibility="Collapsed"
                                       HorizontalAlignment="Center" 
                                       Margin="0,0,0,0">
                                  <b:Interaction.Triggers>
                                      <!-- Show grid when scroller Tag is "ShowPassiveAppearanceGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=passiveAppearanceScroller, Path=Tag}" Value="ShowPassiveAppearanceGrid">
                                          <b:ChangePropertyAction TargetName="scalesGrid" PropertyName="Tag" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="scalesGrid" PropertyName="Visibility" Value="Visible"/>
                                          <b:ChangePropertyAction TargetName="passiveAppearanceScroller" PropertyName="Tag" Value="PassiveAppearanceGridOpen"/>
                                          <ls:BringIntoViewAction TargetObject="{Binding ElementName=scalesGrid}"/>
                                      </b:DataTrigger>

                                      <!-- Hide grid when scroller Tag is "HidePassiveAppearanceGrid" -->
                                      <b:DataTrigger Binding="{Binding ElementName=passiveAppearanceScroller, Path=Tag}" Value="HidePassiveAppearanceGrid">
                                          <b:ChangePropertyAction TargetName="scalesGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="scalesGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="passiveAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                      
                                      <!-- Watch for GridClosed tag from the grid itself (when user presses Cancel in grid) -->
                                      <b:DataTrigger Binding="{Binding ElementName=scalesGrid, Path=Tag}" Value="GridClosed">
                                          <b:ChangePropertyAction TargetName="scalesGrid" PropertyName="Tag" Value=""/>
                                          <b:ChangePropertyAction TargetName="scalesGrid" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="passiveAppearanceScroller" PropertyName="Tag" Value=""/>
                                          <!-- Set focus back to the stored carousel reference -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=focusedCarouselStorage, Path=Content}"/>
                                      </b:DataTrigger>
                                  </b:Interaction.Triggers>
                              </ListBox>

                              <Control x:Name="scalesColour" Template="{StaticResource HUI_ScalesColourBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>


                          </StackPanel>
                      </ScrollViewer>
                </Grid>
            </DockPanel>
          <ControlTemplate.Triggers>
            
            <!-- Tab Content Visibility -->
            <DataTrigger Binding="{Binding IsDragonborn}" Value="True">
                <Setter TargetName="scalesVisual" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="scalesHeaderDragonborn" Property="Visibility" Value="Visible"/>
                <Setter TargetName="showAncestry" Property="Visibility" Value="Visible"/>
                <Setter TargetName="passiveAppearanceScroller" Property="Grid.Row" Value="3"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding AppearancePassive.EmptyMaterialSelected}" Value="True">
                <Setter TargetName="scalesColour" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding AppearancePassive.EmptyMaterialSelected}" Value="False">
                <Setter TargetName="scalesColour" Property="Visibility" Value="Visible"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
          </ControlTemplate>

        <!-- Daisy Tab Templates -->

          <!-- Race Template -->
          <ControlTemplate x:Key="RaceDaisyTemplate">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="CharacterCreation_c" PropertyName="Tag" Value="HideExpandedGrid"/>
                              <!-- Set initial focus to the name input -->
                              <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=nameInput}"/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>

                      <ContentControl x:Name="generalAppearanceOpeningDecorator" Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <ContentControl Template="{StaticResource HUI_CarouselHeaderDecorator}" Grid.Row="1">
                        <ListBox x:Name="RaceCarousel" Template="{StaticResource RaceCarouselWithUIAccept}" 
                                ItemsSource="{Binding SelectableRaces}" SelectedItem="{Binding SelectedRace}">
                            <ListBox.Style>
                                <Style TargetType="ListBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=raceListBox, Path=Visibility}" Value="Visible">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ListBox.Style>
                        </ListBox>
                      </ContentControl>
                      <ScrollViewer Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                    VerticalScrollBarVisibility="Auto" Margin="0,0,0,0" Height="1400" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">

                              <StackPanel x:Name="listStackPanel">
                                  <b:Interaction.Triggers>
                                      <!-- Default behavior: close race list and focus RaceCarousel when an item is selected -->
                                      <b:PropertyChangedTrigger Binding="{Binding ElementName=raceListBox, Path=SelectedItem}">
                                          <b:Interaction.Behaviors>
                                              <b:ConditionBehavior>
                                                  <b:ConditionalExpression>
                                                      <b:ComparisonCondition LeftOperand="{Binding ElementName=raceListBox, Path=Visibility}" RightOperand="Visible"/>
                                                  </b:ConditionalExpression>
                                              </b:ConditionBehavior>
                                          </b:Interaction.Behaviors>
                                          <b:ChangePropertyAction TargetName="raceListBox" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="subRaceListBox" PropertyName="Visibility" Value="Visible"/>
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=RaceCarousel}"/>
                                      </b:PropertyChangedTrigger>
                                      
                                      <!-- Randomization override: refocus randomize carousel if it had focus -->
                                      <b:PropertyChangedTrigger Binding="{Binding ElementName=raceListBox, Path=SelectedItem}">
                                          <b:Interaction.Behaviors>
                                              <b:ConditionBehavior>
                                                  <b:ConditionalExpression>
                                                      <b:ComparisonCondition LeftOperand="{Binding ElementName=randomizeCarousel, Path=(ls:MoveFocus.IsFocused)}" RightOperand="True"/>
                                                  </b:ConditionalExpression>
                                              </b:ConditionBehavior>
                                          </b:Interaction.Behaviors>
                                          <!-- Override: refocus randomize carousel immediately after the default trigger -->
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=randomizeCarousel}"/>
                                      </b:PropertyChangedTrigger>
                                  </b:Interaction.Triggers>
                          
                                  <!-- SubRace ListBox - default visible -->
                                  <ListBox x:Name="subRaceListBox" ItemTemplate="{StaticResource CustomIconTemplate}"
                                          ItemsSource="{Binding SelectableSubRaces}" SelectedItem="{Binding SelectedSubRace}"
                                          ItemContainerStyle="{StaticResource CCIconTextListBoxItemStyle}"
                                          Style="{StaticResource gameplayIconGridStyle}">
                                      <ListBox.Resources>
                                          <Style x:Key="CustomIconStyle" BasedOn="{StaticResource RaceIconStyle}" TargetType="Rectangle"/>
                                      </ListBox.Resources>
                                  </ListBox>
                      
                                  <!-- Race ListBox - hidden by default -->
                                  <ListBox x:Name="raceListBox" ItemTemplate="{StaticResource CustomIconTemplate}"
                                          ItemsSource="{Binding SelectableRaces}" SelectedItem="{Binding SelectedRace}"
                                          ItemContainerStyle="{StaticResource CCIconTextListBoxItemStyle}"
                                          Style="{StaticResource gameplayIconGridStyle}"
                                          IsSynchronizedWithCurrentItem="False"
                                          Visibility="Collapsed">
                                      <ListBox.Resources>
                                          <Style x:Key="CustomIconStyle" BasedOn="{StaticResource RaceIconStyle}" TargetType="Rectangle"/>
                                      </ListBox.Resources>
                                      <b:Interaction.Triggers>
                                          <b:PropertyChangedTrigger Binding="{Binding ElementName=raceListBox, Path=Visibility}">
                                              <b:Interaction.Behaviors>
                                                  <b:ConditionBehavior>
                                                      <b:ConditionalExpression>
                                                          <b:ComparisonCondition LeftOperand="{Binding ElementName=raceListBox, Path=Visibility}" Operator="Equal" RightOperand="Visible"/>
                                                      </b:ConditionalExpression>
                                                  </b:ConditionBehavior>
                                              </b:Interaction.Behaviors>
                                              <b:ChangePropertyAction TargetName="raceListBox" PropertyName="SelectedItem" Value="{Binding SelectedRace}"/>
                                          </b:PropertyChangedTrigger>
                                      </b:Interaction.Triggers>
                                  </ListBox>
                              </StackPanel>
              
                              <!-- Collapse Race ListBox -->
                              <ls:LSInputBinding BoundEvent="UICancel" IsEnabled="{Binding ElementName=raceListBox, Path=IsVisible}">
                                  <b:Interaction.Triggers>
                                      <b:EventTrigger EventName="LSInputBindingReleased">
                                          <b:ChangePropertyAction TargetName="raceListBox" PropertyName="Visibility" Value="Collapsed"/>
                                          <b:ChangePropertyAction TargetName="subRaceListBox" PropertyName="Visibility" Value="Visible"/>
                                          <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=RaceCarousel}"/>
                                          <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                                      </b:EventTrigger>
                                  </b:Interaction.Triggers>
                              </ls:LSInputBinding>
                              
                              <!-- Auto-collapse Race ListBox when SelectedRace changes -->
                              <b:Interaction.Triggers>
                                  <!-- Normal behavior: collapse race list when race changes and focus RaceCarousel (BUT NOT during randomization) -->
                                  <b:PropertyChangedTrigger Binding="{Binding SelectedRace}">
                                      <b:Interaction.Behaviors>
                                          <b:ConditionBehavior>
                                              <b:ConditionalExpression>
                                                  <b:ComparisonCondition LeftOperand="{Binding ElementName=raceListBox, Path=Visibility}" RightOperand="Visible"/>
                                                  <b:ComparisonCondition LeftOperand="{Binding ElementName=randomizeCarousel, Path=(ls:MoveFocus.IsFocused)}" RightOperand="False"/>
                                              </b:ConditionalExpression>
                                          </b:ConditionBehavior>
                                      </b:Interaction.Behaviors>
                                      <b:ChangePropertyAction TargetName="raceListBox" PropertyName="Visibility" Value="Collapsed"/>
                                      <b:ChangePropertyAction TargetName="subRaceListBox" PropertyName="Visibility" Value="Visible"/>
                                      <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=RaceCarousel}"/>
                                  </b:PropertyChangedTrigger>
                                  
                                  <!-- SelectedRace changes: Just ensure proper visibility state during randomization -->
                                  <b:PropertyChangedTrigger Binding="{Binding SelectedRace}">
                                      <b:Interaction.Behaviors>
                                          <b:ConditionBehavior>
                                              <b:ConditionalExpression>
                                                  <b:ComparisonCondition LeftOperand="{Binding ElementName=randomizeCarousel, Path=(ls:MoveFocus.IsFocused)}" RightOperand="True"/>
                                              </b:ConditionalExpression>
                                          </b:ConditionBehavior>
                                      </b:Interaction.Behaviors>
                                      <!-- Just ensure proper visibility - don't change focus, let SelectedItem trigger handle it -->
                                      <b:ChangePropertyAction TargetName="raceListBox" PropertyName="Visibility" Value="Collapsed"/>
                                      <b:ChangePropertyAction TargetName="subRaceListBox" PropertyName="Visibility" Value="Visible"/>
                                  </b:PropertyChangedTrigger>
                              </b:Interaction.Triggers>

                              <Control x:Name="randomize" Template="{StaticResource HUI_RandomizeCharacterBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                              <Control x:Name="bodyType" Template="{StaticResource HUI_BodyTypeBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="identity" Template="{StaticResource HUI_IdentityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="voice" Template="{StaticResource HUI_VoiceBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="genitals" Template="{StaticResource HUI_GenitaliaBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
          </ControlTemplate>

          <!-- Head Template -->
          <ControlTemplate x:Key="HeadDaisyTemplate">
              <Control Template="{StaticResource FaceAppearanceTemplate}"/>
          </ControlTemplate>

          <!-- Hair Template -->
          <ControlTemplate x:Key="HairDaisyTemplate">
              <Control Template="{StaticResource HairAppearanceTemplate}"/>
          </ControlTemplate>

          <!-- Horns Template -->
          <ControlTemplate x:Key="HornsDaisyTemplate">
              <Control Template="{StaticResource HornsAppearanceTemplate}"/>
          </ControlTemplate>

          <!-- Accessories Template -->
          <ControlTemplate x:Key="AccessoriesDaisyTemplate">
              <Control Template="{StaticResource AccessoriesAppearanceTemplate}"/>
          </ControlTemplate>

          <!-- Makeup Template -->
          <ControlTemplate x:Key="MakeupDaisyTemplate">
              <Control Template="{StaticResource MakeupAppearanceTemplate}"/>
          </ControlTemplate>

          <!-- Features Template -->
          <ControlTemplate x:Key="FeaturesDaisyTemplate">
              <Control Template="{StaticResource FeaturesAppearanceTemplate}"/>
          </ControlTemplate>

        <!-- Magic Mirror -->
          <!-- General Template - Same as Appearance but no Body Type Selector -->         
          <ControlTemplate x:Key="GeneralAppearanceTemplateMM">
              <DockPanel>
                  <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      
                      <b:Interaction.Triggers>
                          <!-- Auto-close any open grids when this template loads -->
                          <b:EventTrigger EventName="Loaded">
                              <b:ChangePropertyAction TargetName="CharacterCreation_c" PropertyName="Tag" Value="HideExpandedGrid"/>
                              <!-- Set initial focus to the name input -->
                              <ls:SetMoveFocusAction TargetName="CharacterCreation_c" FocusElement="{Binding ElementName=nameInput}"/>
                          </b:EventTrigger>
                      </b:Interaction.Triggers>

                      <ContentControl x:Name="generalAppearanceOpeningDecorator" Template="{StaticResource HUI_SelectorHeader}" Grid.Row="0"/>
                      <ContentControl x:Name="generalAppearanceHeader" Template="{StaticResource HUI_CarouselHeaderDecorator}" Grid.Row="1">
                          <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h4c12a52dgcd71g43b9ga266gf506b54b0c55', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelHeaderText}" Height="100" Margin="0,-10,0,10"/>
                      </ContentControl>
                      
                      <ScrollViewer Grid.Row="2" DockPanel.Dock="Top" Style="{StaticResource gameplayPanelScrollViewerStyle}" 
                                    VerticalScrollBarVisibility="Auto" Margin="0,0,0,0" Height="1400" Visibility="Visible">

                          <StackPanel Style="{StaticResource gameplayScrolledStackPanelStyle}">
                              <Control x:Name="nameInput" Template="{StaticResource HUI_NamingBoxComponent}" />

                              <StackPanel x:Name="randomizeCharacter" HorizontalAlignment="Center" Margin="0,0,0,0">
                                  <ContentControl x:Name="randomizeSubheader" Template="{StaticResource HUI_Decorated_Subheader}" Margin="0,20,0,0">
                                      <TextBlock Text="{Binding Source='h1595c068g30a1g4efegbd7fg072665991b3b', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource PanelSubHeaderText}" />
                                  </ContentControl>
                                  
                                  <ListBox x:Name="randomizeCarousel" Margin="0,12,0,0" 
                                           Tag="Randomize" Template="{StaticResource HUI_CarouselTemplate}">
                                      <b:Interaction.Triggers>
                                          <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                                              <ls:BringIntoViewAction TargetName="randomizeSubheader"/>
                                          </b:DataTrigger>
                                      </b:Interaction.Triggers>
                                  </ListBox>
                              </StackPanel>
                              <Control x:Name="identity" Template="{StaticResource HUI_IdentityBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="voice" Template="{StaticResource HUI_VoiceBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                              <Control x:Name="genitals" Template="{StaticResource HUI_GenitaliaBoxComponent}" HorizontalAlignment="Center" Margin="0,0,0,0"/>

                          </StackPanel>
                      </ScrollViewer>
                  </Grid>
              </DockPanel>
              
              <ControlTemplate.Triggers>
                  <!-- Voice visibility - Hide if 1 or less are available -->
                  <DataTrigger Binding="{Binding Voices.ComboItems.Count, Converter={StaticResource LessThanConverter}, ConverterParameter=2}" Value="True">
                      <Setter TargetName="voice" Property="Visibility" Value="Collapsed"/>
                  </DataTrigger>
                  
                  <!-- Random appearance visibility -->
                  <DataTrigger Binding="{Binding HasNewRandomAppearance}" Value="True">
                      <Setter TargetName="randomizeCharacter" Property="Visibility" Value="Visible"/>
                  </DataTrigger>
              </ControlTemplate.Triggers>
          </ControlTemplate>
</ResourceDictionary>